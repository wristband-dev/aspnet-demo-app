@using Wristband

@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject CustomAuthenticationStateProvider AuthenticationStateProvider

@code {
    protected override async Task OnInitializedAsync()
    {
        //
        // Fetch the wristband logout URL from the API and then navigate to it
        //
        try
        {
            await AuthenticationStateProvider.RemoveCurrentUserAsync();

            var apiServerLogoutUrl = GetApiServerLogoutUrl();
            var response = await HttpClient.GetAsync(apiServerLogoutUrl);
            if (response.IsSuccessStatusCode)
            {
                var logoutResponse = await response.Content.ReadFromJsonAsync<LogoutResponse>();
                var logoutUrl = logoutResponse?.WristbandLogoutUrl;
                if (!string.IsNullOrWhiteSpace(logoutUrl))
                {
                    NavigationManager.NavigateTo(logoutUrl, true);
                }
            }
            else
            {
                Console.WriteLine($"Failed to fetch logout URL: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Handle errors gracefully
            Console.WriteLine($"Error during logout: {ex.Message}");
        }
    }

    private string GetApiServerLogoutUrl()
    {
        var baseUri = NavigationManager.BaseUri;
        return $"{baseUri}api/auth/logout";
    }

    public class LogoutResponse
    {
        public string WristbandLogoutUrl { get; set; }
    }
}

